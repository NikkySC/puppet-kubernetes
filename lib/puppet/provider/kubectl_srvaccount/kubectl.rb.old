Puppet::Type.type(:kubectl_srvaccount).provide(:kubectl) do
  commands :kubectl => '/bin/kubectl'
  Puppet.debug "running kubectl_srvaccount: #{self.inspect}"

  mk_resource_methods
  def initialize(value={})
    super(value)
    @property_flush = {}
  end

  def self.get_list_of_srvaccounts
    srvaccounts = kubectl('get', 'serviceAccounts', '--all-namespaces').split("\n")
    srvaccounts.shift
    srvaccounts.sort
  end

  def self.get_srvaccount_properties(namespace, name)
    properties = {}
    properties[:ensure] = :present
    properties[:provider] = :kubectl
    properties[:namespace] = namespace
    properties[:name] = name
    properties[:title] = "#{name}:#{namespace}"
    Puppet.debug "get_srvaccount_properties properties: #{properties.inspect}"
    properties
  end

  def self.instances
    get_list_of_srvaccounts.collect do |line|
      arr = line.split
      instance = get_srvaccount_properties(arr[0], arr[1])
      new(instance)
    end
  end

  def create
    @property_flush[:ensure] = :present
  end

  def exists?
    @property_hash[:ensure] == :present and @property_hash[:name] == resource[:name] and @property_hash[:namespace] == resource[:namespace]
  end

  def destroy
    @property_flush[:ensure] = :absent
  end

  def self.prefetch(resources)
    instances.each do |prov|
      if resource = resources[prov.name]
        resource.provider = prov
      end
    end
  end

  def flush
    Puppet.debug "property_flush: #{@property_flush.inspect}"
    if @property_flush[:ensure] == :absent
      # delete
      kubectl('delete', "--namespace=#{resource[:namespace]}", "serviceaccount/#{resource[:name]}")
    elsif @property_flush[:ensure] == :present
      # create
      file = Tempfile.new(['serviceaccount', '.yml'])
      file.write(<<-EOS)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: #{resource[:name]}
      EOS
      file.close
      kubectl('create', "--namespace=#{resource[:namespace]}", '-f', file.path)
      file.unlink
    else
      #update
    end

    # Collect the resources again once they've been changed (that way `puppet
    # resource` will show the correct values after changes have been made).
    @property_hash = self.class.get_srvaccount_properties(resource[:namespace], resource[:name])
  end

end
